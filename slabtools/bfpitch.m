% bfpitch - beamformer pitch detection
%
% The end goal was to use voice pitch period detection and raised-cosine
% reconstruction to reduce the impact of reflections on the cross-correlations.
% Unfortunately, the pitch detection problem itself had significant reflection
% issues, so this approach was shelved.  But, this reasoning did lead to the
% development of the BF3 algorithm (bf3.m).  But, that too, was shelved due to
% a pause in the project.

% modification history
% --------------------
%                ----  v6.0.0  ----
% 04.12.07  JDM  created
% 04.19.07  JDM  added filter code
%
% JDM == Joel D. Miller

% Copyright (C) 2001-2018 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration (NASA).
% All Rights Reserved.
% 
% This software is distributed under the NASA Open Source Agreement (NOSA),
% version 1.3.  The NOSA has been approved by the Open Source Initiative.
% See the file NOSA.txt at the top of the distribution directory tree for the
% complete NOSA document.
% 
% THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANYKIND,
% EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY
% WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED
% WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM
% FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE,
% OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT
% SOFTWARE.

%23456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890

fs = 48;  % samples/ms

% 1536/48 = 32ms  % framelen in ms
% 32ms/8ms = 4 frames (8ms = male pitch period = pitchlen)
framelen = 1536;        % motu buffer sizes 1024,1536,2048, samples
pitchlen = framelen/4;  % pitch period window

% ==== knob ====
% from looking at lowest of four channels, 'ss' sound beginning, quite low
% but audible
level_thresh = 0.001;

% ==== knob ====
% min time proximity of peaks, ms * fs
time_thresh = 3 * fs;

% test waveform (see SLABForm.exe)
%[ym,fs,nbits,opts] = wavread( 'lab_array1.wav' );
%[ym,fs,nbits,opts] = wavread( 'space4ch.wav' );
[ym,fs,nbits,opts] = wavread( 'space4ch30_eq.wav' );
[ ymlen numch ] = size(ym);

ym = ym(40000:145000,:);
[ ymlen numch ] = size(ym);
%wavplay(ym(:,1),fs);

ymmax = max(max(abs(ym)));
ym = ym / ymmax;

numframes = floor(ymlen/framelen);
ymod = zeros(numframes*framelen,numch);
[ ymodlen numch ] = size(ymod);
% previous max value
prev_y = [ 0 0 0 0 ];
% previous max value index, init so not under thresh
prev_i = [ -framelen -framelen -framelen -framelen ];
for index1 = 1:framelen:(numframes-1)*framelen+1,
  for ch = 1:numch,
    for i1 = index1:pitchlen/2:index1+framelen-pitchlen,
      i2 = i1 + pitchlen - 1;
      [y,i] = max( ym(i1:i2,ch) );
      temp_i = i1 + i - 1;
      if y > level_thresh,
        if abs(temp_i - prev_i(ch)) < time_thresh,
          if y > prev_y(ch),
            ymod(prev_i(ch),ch) = 0;
            ymod(temp_i,ch) = y;
            prev_y(ch) = y;
            prev_i(ch) = temp_i;
          end;
        else,
          ymod(temp_i,ch) = y;
          prev_y(ch) = y;
          prev_i(ch) = temp_i;
        end;  % time_thresh
      end;  % level_thresh
    end;  % pitch window
  end;  % ch
end;  % frame

figure;
plot( (0:(ymlen-1))/fs, ones(ymlen,1) * [ 1 2 3 4 ] + ym, '-' );
hold on;
plot( (0:(ymodlen-1))/fs, ones(ymodlen,1) * [ 1.5 2.5 3.5 4.5 ] + ymod, '.' );
grid on;
axis( [ 0 (ymlen-1)/fs 1 5.5 ] );
title( 'pitch detection' );

% isolate pitch period (1/8ms == 125 Hz), treat reflections as
% greater-than-pitch-frequency noise;
% note: this reasoning led to the BF3 algorithm
if 0,
% sos = 34.6 cm/ms
% fdatool output:
% M-File generated by MATLAB(R) 7.1 and the Signal Processing Toolbox 6.4.
% Generated on: 19-Apr-2007 15:34:25
% FIR least-squares Lowpass filter designed using the FIRLS function.
% All frequency values are in Hz.
Fs    = 48000;  % Sampling Frequency
N     = 256;    % Order
Fpass = 130;    % Passband Frequency
Fstop = 260;    % Stopband Frequency
Wpass = 1;      % Passband Weight
Wstop = 1;      % Stopband Weight
% Calculate the coefficients using the FIRLS function.
b  = firls(N, [0 Fpass Fstop Fs/2]/(Fs/2), [1 1 0 0], [Wpass Wstop]);

y = filter(b,1,ym);
y = y(N/2:end,:);

figure;
plot(ym);
hold on;
plot(y,':');
grid on;
end;
