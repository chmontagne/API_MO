% hencbview - display MAT-file HRTF database critical-band energy.
%
% hencbview allows the user to view MAT files generated by hencbmat.
% When using, press the 'h' key (help) to view options.
%
% See also: hencbmat

% modification history
% --------------------
%                ----  v6.6.0  ----
% 05.04.11  JDM  created
%                ----  v6.6.1  ----
% 04.24.12  JDM  removed L/R dB means, use vcen.m/hencb() instead
%                ----  v6.7.2  ----
% 08.12.13  JDM  to slabtools
% 10.18.13  JDM  added vsyms() vis with CB-mapped-to-El (w/ symmetry)
%                ----  v6.7.3  ----
% 02.05.14  JDM  CB-to-EL cax -50 10 to -50 15 to match LR
%                ----  v6.7.5  ----
% 01.26.16  JDM  added critical-band IID vis
%
% JDM == Joel D. Miller

% Copyright (C) 2001-2018 United States Government as represented by the
% Administrator of the National Aeronautics and Space Administration (NASA).
% All Rights Reserved.
% 
% This software is distributed under the NASA Open Source Agreement (NOSA),
% version 1.3.  The NOSA has been approved by the Open Source Initiative.
% See the file NOSA.txt at the top of the distribution directory tree for the
% complete NOSA document.
% 
% THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANYKIND,
% EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY
% WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED
% WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM
% FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE,
% OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT
% SOFTWARE.

%23456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890

bSphere = false;      % spheres or surfaces
tb = true;            % top-bottom-2D or 3D
sym = 0;              % LR, symmetric-head test, rms

% 90 to -90 (see vsyms.m)
NNN = 20*2-1;
elfmap = 90-((0:NNN)/NNN)*180;

d = dir('*.cb.mat');
num = length(d);      % number of MATs
k = 1;                % MAT index
cb = 1;               % critical band
el = 1;               % elevation
loop = true;
while loop,
  cbmat = load( d(k).name );
  elLen = length(cbmat.elmap);
  name = strtok(d(k).name,'.');

  % 4 displays: LR, symmetric-head test, RMS, CB-to-EL
  switch sym,
    case 0,  % left and right critical band energy
      zL = cbmat.zL(:,:,cb);
      zR = cbmat.zR(:,:,cb);
      fprintf( '%s  %2d  %5.0f Hz  L %5.1f %5.1f  R %5.1f %5.1f  dB\n', ...
        name, cb, cbmat.fcb(cb), max(max(zL)), min(min(zL)), ...
        max(max(zR)), min(min(zR)));
      cax = [ -50 15 ];  % color axis, dB

    case 1,  % symmetric-head test for one critical band
      numAz = length(cbmat.azmap);
      zL = cbmat.zL(:,1:numAz,cb) - cbmat.zR(:,numAz:-1:1,cb);
      zR = cbmat.zR(:,1:numAz,cb) - cbmat.zL(:,numAz:-1:1,cb);
      fprintf( '%s  %2d  %5.0f Hz  %4.1f dB\n', name, cb, cbmat.fcb(cb), ...
               max(max(abs(zL))) );
      cax = [ -20 20 ];  % color axis, dB

    case 2,  % symmetric-head test RMS across all critical bands
      % difference in dB = abs( 10*log10( h1p / h2p ) )
      numAz = length(cbmat.azmap);
      zL = cbmat.zL(:,1:numAz,:) - cbmat.zR(:,numAz:-1:1,:);
      % spectral energy ratio difference RMS;
      % calculate RMS difference (RMS Error formula = standard deviation formula)
      zL = sqrt( sum( zL .* zL, 3 ) / (length(cbmat.fcb)-1) );
      zR = fliplr(zL);
      fprintf( '%s  %4.1f dB\n', name, max(max(abs(zL))) );
      cax = [ 0 10 ];  % color axis, dB

    case 3,  % critical bands mapped to elevation (w/ symmetry)
      zeL = squeeze(cbmat.zL(el,:,:))';
      zeR = squeeze(cbmat.zR(el,:,:))';
      zL = [ zeL; flipud(fliplr(zeR)) ];
      zR = [ zeR; flipud(fliplr(zeL)) ];
      fprintf( '%s  %3d  L %5.1f %5.1f  R %5.1f %5.1f  dB\n', name, ...
        cbmat.elmap(el), ...
        max(max(zeL)), min(min(zeL)), max(max(zeR)), min(min(zeR)) );
      cax = [ -50 15 ];  % color axis, dB

    case 4,  % critical-band IID
      numAz = length(cbmat.azmap);
      zL = cbmat.zL(:,1:numAz,cb) - cbmat.zR(:,1:numAz,cb);
      zR = cbmat.zR(:,1:numAz,cb) - cbmat.zL(:,1:numAz,cb);
      fprintf( '%s  %2d  %5.0f Hz  %4.1f dB\n', name, cb, cbmat.fcb(cb), ...
               max(max(abs(zL))) );
      cax = [ -40 40 ];  % color axis, dB

  end;

  % display critical-band energy 2D or 3D, surfaces or spheres
  if bSphere,
    if sym == 3, % CB-to-EL
      lrsphere( cbmat.azmap, elfmap, zL, zR, ...
        sprintf('%s L EL %d',name,cbmat.elmap(el)), ...
        sprintf('%s R EL %d',name,cbmat.elmap(el)), cax, tb );
    else,
      lrsphere( cbmat.azmap, cbmat.elmap, zL, zR, ...
        sprintf('%s L cb%d %.0f Hz',name,cb,cbmat.fcb(cb)), ...
        sprintf('%s R cb%d %.0f Hz',name,cb,cbmat.fcb(cb)), cax, tb );
    end;
  else
    if sym == 3, % CB-to-EL
      lrsurf( cbmat.azmap, elfmap, zL, zR, ...
        sprintf('%s L EL %d',name,cbmat.elmap(el)), ...
        sprintf('%s R EL %d',name,cbmat.elmap(el)), cax, tb, ...
                0, [], [] );
    else,
      lrsurf( cbmat.azmap, cbmat.elmap, zL, zR, ...
        sprintf('%s L cb%d %.0f Hz',name,cb,cbmat.fcb(cb)), ...
        sprintf('%s R cb%d %.0f Hz',name,cb,cbmat.fcb(cb)), cax, tb, ...
                0, [], [] );
    end;
  end;

  % works okay for default figure window
  hcb = colorbar;
  set( hcb, 'Position', [.925 .11 .03 .815] );

  % note: ginput() disables the toolbar, e.g., can't use rotate tool
  [x,y,key] = ginput(1);
  switch key
    case 28  % left arrow, previous database
      if k == 1,
        k = num;
      else
        k = k - 1;
      end;
    case 29  % right arrow, next database
      if k == num,
        k = 1;
      else
        k = k + 1;
      end;
    case 31  % down arrow, lower critical band, elevation
      if sym == 3,
        if el == 1, el = elLen; else el = el - 1; end;
      else,
        if cb == 1, cb = 20; else cb = cb - 1; end;
      end;
    case 30  % up arrow, higher critical band, elevation
      if sym == 3,
        if el == elLen, el = 1; else el = el + 1; end;
      else,
        if cb == 20, cb = 1; else cb = cb + 1; end;
      end;
    case 104  % h key, help
      fprintf( [ '\n' ...
        '   up arrow    higher critical band / elevation\n' ...
        ' down arrow    lower critical band / elevation\n' ...
        ' left arrow    previous database\n' ...
        'right arrow    next database\n' ...
        '      t key    2D/3D\n' ...
        '      s key    sphere/surface\n' ...
        '      c key    cycle: LR/symmetric/RMS/CB-to-ElSym/CB-IID\n' ...
        '      h key    help\n' ...
        '      q key    quit\n' ...
        '  control-c    abort\n\n' ] );
    case 116  % t key, 2D/3D
      tb = ~tb;
    case 115  % s key, sphere/surface
      bSphere = ~bSphere;
    case  99  % c key, cycle LR/symmetric/RMS/CB-to-EL/CB-IID
      sym = mod(sym+1,5);
    case 113  % q key, quit
      loop = false;
  end;
end;

% for cut'n'paste to command window
if 0,
% color axis
cax = [ min( [ min(min(min(cbmat.zL))) min(min(min(cbmat.zR))) ] ) ...
max( [ max(max(max(cbmat.zL))) max(max(max(cbmat.zR))) ] ) ]
cax = [ -50 15 ];  % HRTF critical bands
%cax = [ -30 6 ];  % HRTF mag responses
figure;
caxis( cax );
colorbar('NorthOutside');
end;
