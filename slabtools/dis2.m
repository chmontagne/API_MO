% dis2.m - CSIDISRadio2/sdiStat/slabDISInterface DIS timing analysis

% modification history
% --------------------
%                ----  v6.3.1  ----
% 03.25.09  CJM  created
% 04.06.09  CJM  added oneTick()
%
% CJM == Joel D. Miller, Copyright Joel D. Miller (see below)

%23456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890

% Copyright (C) 2006-2018 Joel D. Miller.  All Rights Reserved.
%
% This software constitutes a "Modification" to the SLAB software system and is
% distributed under the NASA Open Source Agreement (NOSA), version 1.3.
% The NOSA has been approved by the Open Source Initiative.  See the file
% NOSA.txt at the top of the distribution directory tree for the complete NOSA
% document.

% stat.txt can be generated by sidisradio2.cpp, sdiStat.cpp, and PDUSorter.cpp.
% trim stat.txt to 6 col data (ctl-shift-home/end useful for selection)
% >> load stat.txt OR
% >> s = load( 'stat.txt' );

function dis2( stat )

color = [ 'b', 'g', 'r', 'c', 'm', 'k', 'y' ];

id = unique( stat(:,5) );
klen = length(id)
if klen > length(color),
  klen = length(color);
end;

% signal PDUs
figure;
for k=1:klen,
  oneID( id(k), stat, color(k), k*10 );
end;
title( 'DIS Signal PDUs' );
xlabel( 'seconds' );
ylabel( 'ms' );
grid on;

% signal PDU running totals
figure;
for k=1:klen,
  oneRun( id(k), stat, color(k), k*100 );
end;
title( 'DIS Running Totals' );
xlabel( 'seconds' );
ylabel( 'ms' );
grid on;

% PDU timestamps (library stat dump has PDU timestamps)
if size(stat,2) >= 8,
figure;
for k=1:klen,
  oneTick( id(k), stat, color(k) );
end;
title( 'DIS PDU Timestamps' );
xlabel( 'seconds' );
ylabel( 'ticks' );
grid on;
end;

%------------------------------------------------------------------------------

function oneID( id, stat, color, cap )

% col    data
%
% 1      index
% 2      timestamp
% 3      time diff
% 4      DIS ID
% 5      DIS ID char* as long (unique numeric ID)
% 6      state (4 samples received, 0/1/2 trans state)
% 7      #samples
% 8*     PDU timestamp
% 9*     0 = relative, 1 = absolute
%
% to
%
% 1      timestamp
% 2      state
% 3      #samples
%
% transmitter state
% 0 = radio off
% 1 = radio on, not transmitting
% 2 = radio on, transmitting

i = find( stat(:,5) == id );
stat1 = [ stat(i,2) stat(i,6:7) ];

fs = 8;  % samples/ms

% samples received
i = find( stat1(:,2) == 4 );
plot( stat1(i,1), stat1(i,3)/fs, [ color '.' ] );
hold on;

% show transmitter states
tranState( id, stat1, cap, color, 1 );

%------------------------------------------------------------------------------

function oneRun( id, stat, color, cap )

i = find( stat(:,5) == id );
stat1 = [ stat(i,2) stat(i,6:7) ];

fs = 8;  % samples/ms

% first signal PDU after trans begin, initially set to true in case signal
% PDU received before trans on
bFirst = true;

transLast = 0;  % radio off
run1 = [];
runSum = 0;
for k = 1:length(stat1),
  transCur = stat1(k,2);  % 0,1,2 (trans PDU) and 4 (signal PDU)
  % if transmitter PDU
  if transCur ~= 4,
    % if radio now on and trans when it wasn't before, flag first signal PDU
    if transCur == 2 && transLast ~= 2,
      bFirst = true;
    end;
    transLast = transCur;
  else  % signal PDU
    timeCur = stat1(k,1);  % s
    if bFirst,
      bFirst = false;
      runSum = 0;
    else
      runSum = runSum - (timeCur - timeLast)*1000;  % ms
    end;
    run1 = [ run1; [ timeCur runSum transLast ] ];
    runSum = runSum + stat1(k,3)/fs;  % signal PDU buf in ms
    timeLast = timeCur;
  end;
end;

% signal buf running total in ms
plot( run1(:,1), run1(:,2), [ color '.-' ] );
hold on;
% show signal PDUs outside of transmission
i = find( run1(:,3) ~= 2 );
plot( run1(i,1), run1(i,2), [ color 's' ] );

% show transmitter states
tranState( id, stat1, cap, color, 0 );

%------------------------------------------------------------------------------

function oneTick( id, stat, color )

% col    data
%
% 1      index
% 2      timestamp
% 3      time diff
% 4      DIS ID
% 5      DIS ID char* as long (unique numeric ID)
% 6      state (4 samples received, 0/1/2 trans state)
% 7      #samples
% 8*     PDU timestamp
% 9*     0 = relative, 1 = absolute

i = find( stat(:,5) == id );
stat1 = [ stat(i,2) stat(i,[6 8]) ];

% all PDUs
plot( stat1(:,1), stat1(:,3), [ color '-' ] );
hold on;
% signal PDUs
i = find( stat1(:,2) == 4 );
plot( stat1(i,1), stat1(i,3), [ color '.' ] );
% transmitter PDUs - transmitting
i = find( stat1(:,2) == 2 );
plot( stat1(i,1), stat1(i,3), [ color 'o' ] );
% transmitter PDUs - not transmitting
i = find( (stat1(:,2) == 0) | (stat1(:,2) == 1) );
plot( stat1(i,1), stat1(i,3), [ color 'x' ] );

%------------------------------------------------------------------------------

function tranState( id, stat1, cap, color, p )

% transmitting
i = find( stat1(:,2) == 2 );
stem( stat1(i,1), cap*ones(length(i),1), [ color '--' ] );
if p,
  fprintf('%d transmitting\n',id);
  disp(stat1(i,1))
end;

% not transmitting
i = find( (stat1(:,2) == 0) | (stat1(:,2) == 1) );
stem( stat1(i,1), cap*ones(length(i),1), [ color 'x-.' ] );
if p,
  fprintf('%d not transmitting\n',id);
  disp(stat1(i,1))
end;
